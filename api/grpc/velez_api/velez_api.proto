syntax = "proto3";

package velez_api;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "api/grpc/matreshka_api.proto";

import "npm.proto";

option go_package = "go.vervstack.ru/velez/pkg/velez_api;velez_api";
option (npm_package) = "@vervstack/velez";

service VelezAPI {
  rpc Version(Version.Request) returns (Version.Response) {
    option (google.api.http) = {
      get: "/api/version"
    };
  };

  rpc CreateSmerd(CreateSmerd.Request) returns (Smerd) {
    option (google.api.http) = {
      post: "/api/smerd/create"
      body: "*"
    };
  }
  rpc ListSmerds(ListSmerds.Request) returns (ListSmerds.Response) {
    option (google.api.http) = {
      post: "/api/smerd/list"
      body: "*"
    };
  }
  rpc DropSmerd(DropSmerd.Request) returns (DropSmerd.Response) {
    option (google.api.http) = {
      post: "/api/smerd/drop"
      body: "*"
    };
  }

  rpc GetHardware(GetHardware.Request) returns (GetHardware.Response) {
    option (google.api.http) = {
      get: "/api/hardware"
    };
  }

  rpc UpgradeSmerd(UpgradeSmerd.Request) returns (UpgradeSmerd.Response) {
    option (google.api.http) = {
      post: "/api/smerd/upgrade"
      body: "*"
    };
  }

  // AssembleConfig - collects configurations
  // from container and matreshka api and fuses them to one
  // Calling this procedure will update master config in
  // matreshka instance and return body in yaml format
  rpc AssembleConfig(AssembleConfig.Request) returns (AssembleConfig.Response) {
    option (google.api.http) = {
      post: "/api/config/assemble"
      body: "*"
    };
  }
}

message Version {
  message Request {}

  message Response {
    string version = 1;
  }
}

message Port {
  uint32 service_port_number = 1;
  Protocol protocol = 2;
  optional uint32 exposed_to = 3;

  enum Protocol {
    unknown = 0;
    tcp = 1;
    udp = 2;
  };
}

message Volume {
  string volume_name = 1;
  string container_path = 2;
}

message Bind {
  string host_path = 1;
  string container_path = 2;
}

message NetworkBind {
  string network_name = 1;
  repeated string aliases = 2;
}

message Image {
  string name = 1;
  repeated string tags = 2;
  map<string, string> labels = 3;
}

message Smerd {
  string uuid = 1;
  string name = 2;
  string image_name = 3;

  repeated Port ports = 4;
  repeated Volume volumes = 5;

  Status status = 6;
  google.protobuf.Timestamp created_at = 7;

  repeated NetworkBind networks = 8;
  map<string, string> labels = 9;
  map<string, string> env = 10;

  repeated Bind binds = 11;

  enum Status {
    unknown = 0;
    created = 1;
    restarting = 2;
    running = 3;
    removing = 4;
    paused = 5;
    exited = 6;
    dead = 7;
  }
}

message Container {
  message Hardware {
    optional float cpu_amount = 1;
    optional uint32 ram_mb = 2;
    optional uint32 memory_swap_mb = 3;
  }

  message Settings {
    repeated Port ports = 1;
    repeated NetworkBind network = 2;
    repeated Volume volumes = 3;
    repeated Bind binds = 4;
  }

  message Healthcheck {
    // if command is not presented,
    // velez will simply
    // wait "retires" times for "interval_second" seconds each time,
    // until container get status Running
    optional string command = 1;
    uint32 interval_second = 2;
    optional uint32 timeout_second = 3;
    uint32 retries = 4;
  }
}

message CreateSmerd {
  message Request {
    string name = 1;
    string image_name = 2;

    optional Container.Hardware hardware = 3;
    optional Container.Settings settings = 4;

    optional string command = 5;

    map<string, string> env = 6;

    optional Container.Healthcheck healthcheck = 7;

    map<string, string> labels = 8;

    bool ignore_config = 9;
    bool use_image_ports = 10;
    optional string config_version = 11;
    //    not implemented
    bool auto_upgrade = 12;

    RestartPolicy restart = 13;

    MatreshkaConfigSpec config = 14;
  }
}

message ListSmerds {
  message Request {
    optional uint32 limit = 1;
    optional string name = 2;
    optional string id = 3;
    map<string, string> label = 4;
  }

  message Response {
    repeated Smerd smerds = 1;
  }
}

message DropSmerd {
  message Request {
    repeated string uuids = 1;
    repeated string name = 2;
  }

  message Response {
    message Error {
      string uuid = 1;
      string cause = 2;
    }

    repeated Error failed = 1;
    repeated string successful = 2;
  }
}

message GetHardware {
  message Request {

  }

  message Response {
    message Value {
      string value = 1;
      string err = 2;
    }
    Value cpu = 1;
    Value disk_mem = 2;
    Value ram = 3;

    repeated uint32 ports_available = 4;
    repeated uint32 ports_occupied = 5;
  }
}

message AssembleConfig {
  message Request {
    string image_name = 1;
    string service_name = 2;
  }
  message Response {
    bytes config = 1;
  }
}

message UpgradeSmerd {
  message Request {
    string name = 1;
    string image = 2;
  }
  message Response {}
}

message RestartPolicy {
  RestartPolicyType type = 1;
  optional uint32 FailureCount = 2;
}

enum RestartPolicyType {
  unless_stopped = 0;
  no = 1;
  always = 2;
  on_failure = 3;
}

message MatreshkaConfigSpec {
  // Name of config. By default velez will try to guess config by
  // indirect signs such as (no priority)
  //  - special MATRESHKA_CONFIG tags
  //  - image (e.g. postgres, angie and etc)
  //  - smerd's name (starting with special prefix)
  optional string config_name = 1;
  // Version to load into smerd. By default - master
  optional string config_version = 2;
  // Format of config. Different default for different types
  // e.g
  //    - verv - sets config as environment variables
  //    - pg - writes to a config file
  // general rule - if target_path is not set -> it's a environment variables
  optional matreshka_api.Format config_format = 3;
  // target path of config.
  //    If set and has .yaml extension - writes yaml file at path
  //
  //    If not set - writes config as an environment variables
  optional string system_path = 4;
}