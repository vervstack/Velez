// Code generated by RedSock CLI.
// DO EDIT, DON'T DELETE THIS FILE.

package app

import (
	"context"
	"time"

	"github.com/sirupsen/logrus"
	errors "go.redsock.ru/rerrors"
	"go.redsock.ru/toolbox/closer"
	"golang.org/x/sync/errgroup"
	"google.golang.org/grpc"

	"go.vervstack.ru/Velez/internal/backservice/autoupgrade"
	"go.vervstack.ru/Velez/internal/backservice/service_discovery"
	"go.vervstack.ru/Velez/internal/clients"
	"go.vervstack.ru/Velez/internal/clients/matreshka"
	"go.vervstack.ru/Velez/internal/config"
	"go.vervstack.ru/Velez/internal/pipelines"
	"go.vervstack.ru/Velez/internal/security"
	"go.vervstack.ru/Velez/internal/service"
	"go.vervstack.ru/Velez/internal/service/service_manager"
	"go.vervstack.ru/Velez/internal/transport/control_plane_api_impl"
	"go.vervstack.ru/Velez/internal/transport/velez_api_impl"
	"go.vervstack.ru/Velez/pkg/docs"
	"go.vervstack.ru/Velez/pkg/velez_api"
)

type Custom struct {
	// NodeClients - hardware scanner, docker and wrappers
	NodeClients clients.NodeClients

	// Service discovery client
	ServiceDiscovery service_discovery.ServiceDiscovery
	// Configuration client
	MatreshkaClient matreshka.Client
	// ClusterClients - contains verv cluster's dependencies
	ClusterClients clients.ClusterClients

	// Services - contains business logic services
	Services  service.Services
	Pipeliner pipelines.Pipeliner
	// Api implementation
	ApiGrpcImpl         *velez_api_impl.Impl
	ControlPlaneApiImpl *control_plane_api_impl.Impl
}

func (c *Custom) Init(a *App) (err error) {
	c.NodeClients, err = clients.NewNodeClientsContainer(a.Ctx, a.Cfg)
	if err != nil {
		return errors.Wrap(err, "error initializing internal clients")
	}

	err = c.setupVervNodeEnvironment()
	if err != nil {
		return errors.Wrap(err, "error setting up node environment")
	}

	err = c.initServiceDiscovery(a)
	if err != nil {
		return errors.Wrap(err, "error initializing service discovery")
	}

	err = c.initConfigurationService(a)
	if err != nil {
		return errors.Wrap(err, "error initializing configuration service")
	}

	c.ClusterClients = clients.NewClusterClientsContainer(c.MatreshkaClient)

	c.initVelezServices(a)

	err = c.initApiServer(a)
	if err != nil {
		return errors.Wrap(err)
	}

	return nil
}

func (c *Custom) Start(ctx context.Context) error {
	errg, ctx := errgroup.WithContext(ctx)
	errg.Go(func() error {
		err := autoupgrade.New(c.NodeClients.Docker(), time.Second*30, c.Pipeliner).Start()
		if err != nil {
			return errors.Wrap(err, "error starting autoupgrade")
		}

		return nil
	})

	err := errg.Wait()
	if err != nil {
		return errors.Wrap(err, "error starting custom workers")
	}

	return nil
}

func (c *Custom) Stop() error {

	return nil
}

func (c *Custom) setupLogger(a *App) {
	logger := logrus.StandardLogger()
	level := logrus.InfoLevel

	switch a.Cfg.Environment.LogLevel {
	case config.LogLevel_Trace:
		level = logrus.TraceLevel
	case config.LogLevel_Debug:
		level = logrus.DebugLevel
	case config.LogLevel_Warn:
		level = logrus.WarnLevel
	case config.LogLevel_Error:
		level = logrus.ErrorLevel
	case config.LogLevel_Fatal:
		level = logrus.FatalLevel
	case config.LogLevel_Panic:
		level = logrus.PanicLevel
	}
	logger.SetLevel(level)

	switch a.Cfg.Environment.LogFormat {
	case "JSON":
		logger.SetFormatter(&logrus.JSONFormatter{})
	}
}

func (c *Custom) initVelezServices(a *App) {
	var err error
	c.Services, err = service_manager.New(a.Ctx, c.NodeClients, c.ClusterClients)
	if err != nil {
		logrus.Fatalf("error initializing service manager: %v", err)
	}

	c.Pipeliner = pipelines.NewPipeliner(c.NodeClients, c.Services)

	logrus.Info("shut down on exit is set to: ", a.Cfg.Environment.ShutDownOnExit)
	if a.Cfg.Environment.ShutDownOnExit {
		closer.Add(smerdsDropper(c.Services.SmerdManager()))
	}
}

func (c *Custom) initApiServer(a *App) error {
	c.ApiGrpcImpl = velez_api_impl.NewImpl(a.Cfg, c.Services, c.Pipeliner)
	c.ControlPlaneApiImpl = control_plane_api_impl.New(c.ServiceDiscovery)

	a.ServerMaster.AddImplementation(c.ApiGrpcImpl, c.ControlPlaneApiImpl)
	a.ServerMaster.AddHttpHandler(docs.Swagger())

	if !a.Cfg.Environment.DisableAPISecurity {
		a.ServerMaster.AddServerOption(security.GrpcIncomingInterceptor(c.NodeClients.SecurityManager().ValidateKey))
	}

	grpcLogger := logrus.New()
	grpcLogger.SetFormatter(&logrus.JSONFormatter{})
	grpcLogger.SetLevel(logrus.DebugLevel)

	a.ServerMaster.AddServerOption(grpc.UnaryInterceptor(
		func(ctx context.Context, req any, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (resp any, err error) {
			fields := logrus.Fields{
				"method":  info.FullMethod,
				"request": req,
			}

			defer func() {
				grpcLogger.WithFields(fields).
					Debug("GRPC request:")
			}()

			resp, err = handler(ctx, req)
			fields["error"] = err
			fields["response"] = resp

			return resp, err
		}))

	return nil
}

func smerdsDropper(smerdService service.ContainerService) func() error {
	return func() error {
		logrus.Infof("ShutDownOnExit env variable is set to TRUE. Dropping launched smerds")
		logrus.Infof("Listing launched smerds")
		ctx := context.Background()

		smerds, err := smerdService.ListSmerds(ctx, &velez_api.ListSmerds_Request{})
		if err != nil {
			return err
		}

		names := make([]string, 0, len(smerds.Smerds))

		for _, sm := range smerds.Smerds {
			names = append(names, sm.Name)
		}

		logrus.Infof("%d smerds is active. %v", len(smerds.Smerds), names)

		dropReq := &velez_api.DropSmerd_Request{
			Uuids: make([]string, len(smerds.Smerds)),
		}

		for i := range smerds.Smerds {
			dropReq.Uuids[i] = smerds.Smerds[i].Uuid
		}

		logrus.Infof("Dropping %d smerds", len(smerds.Smerds))

		dropSmerds, err := smerdService.DropSmerds(ctx, dropReq)
		if err != nil {
			return err
		}

		logrus.Infof("%d smerds dropped successfully", len(dropSmerds.Successful))
		if len(dropSmerds.Successful) != 0 {
			logrus.Infof("Dropped smerds: %v", dropSmerds.Successful)
		}

		if len(dropSmerds.Failed) != 0 {
			logrus.Errorf("%d smerds failed to drop", len(dropSmerds.Failed))
			for _, f := range dropSmerds.Failed {
				logrus.Errorf("error dropping %s. Cause: %s", f.Uuid, f.Cause)
			}
		}

		return nil
	}
}
