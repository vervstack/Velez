// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.28.3
// source: velez_api.proto

package velez_api

import (
	_ "go.redsock.ru/protoc-gen-npm/npmplugin"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Port_Protocol int32

const (
	Port_unknown Port_Protocol = 0
	Port_tcp     Port_Protocol = 1
	Port_udp     Port_Protocol = 2
)

// Enum value maps for Port_Protocol.
var (
	Port_Protocol_name = map[int32]string{
		0: "unknown",
		1: "tcp",
		2: "udp",
	}
	Port_Protocol_value = map[string]int32{
		"unknown": 0,
		"tcp":     1,
		"udp":     2,
	}
)

func (x Port_Protocol) Enum() *Port_Protocol {
	p := new(Port_Protocol)
	*p = x
	return p
}

func (x Port_Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Port_Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_velez_api_proto_enumTypes[0].Descriptor()
}

func (Port_Protocol) Type() protoreflect.EnumType {
	return &file_velez_api_proto_enumTypes[0]
}

func (x Port_Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Port_Protocol.Descriptor instead.
func (Port_Protocol) EnumDescriptor() ([]byte, []int) {
	return file_velez_api_proto_rawDescGZIP(), []int{1, 0}
}

type Smerd_Status int32

const (
	Smerd_unknown    Smerd_Status = 0
	Smerd_created    Smerd_Status = 1
	Smerd_restarting Smerd_Status = 2
	Smerd_running    Smerd_Status = 3
	Smerd_removing   Smerd_Status = 4
	Smerd_paused     Smerd_Status = 5
	Smerd_exited     Smerd_Status = 6
	Smerd_dead       Smerd_Status = 7
)

// Enum value maps for Smerd_Status.
var (
	Smerd_Status_name = map[int32]string{
		0: "unknown",
		1: "created",
		2: "restarting",
		3: "running",
		4: "removing",
		5: "paused",
		6: "exited",
		7: "dead",
	}
	Smerd_Status_value = map[string]int32{
		"unknown":    0,
		"created":    1,
		"restarting": 2,
		"running":    3,
		"removing":   4,
		"paused":     5,
		"exited":     6,
		"dead":       7,
	}
)

func (x Smerd_Status) Enum() *Smerd_Status {
	p := new(Smerd_Status)
	*p = x
	return p
}

func (x Smerd_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Smerd_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_velez_api_proto_enumTypes[1].Descriptor()
}

func (Smerd_Status) Type() protoreflect.EnumType {
	return &file_velez_api_proto_enumTypes[1]
}

func (x Smerd_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Smerd_Status.Descriptor instead.
func (Smerd_Status) EnumDescriptor() ([]byte, []int) {
	return file_velez_api_proto_rawDescGZIP(), []int{5, 0}
}

type Version struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Version) Reset() {
	*x = Version{}
	mi := &file_velez_api_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Version) ProtoMessage() {}

func (x *Version) ProtoReflect() protoreflect.Message {
	mi := &file_velez_api_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Version.ProtoReflect.Descriptor instead.
func (*Version) Descriptor() ([]byte, []int) {
	return file_velez_api_proto_rawDescGZIP(), []int{0}
}

type Port struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ServicePortNumber uint32                 `protobuf:"varint,1,opt,name=service_port_number,json=servicePortNumber,proto3" json:"service_port_number,omitempty"`
	Protocol          Port_Protocol          `protobuf:"varint,2,opt,name=protocol,proto3,enum=velez_api.Port_Protocol" json:"protocol,omitempty"`
	ExposedTo         *uint32                `protobuf:"varint,3,opt,name=exposed_to,json=exposedTo,proto3,oneof" json:"exposed_to,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Port) Reset() {
	*x = Port{}
	mi := &file_velez_api_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Port) ProtoMessage() {}

func (x *Port) ProtoReflect() protoreflect.Message {
	mi := &file_velez_api_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Port.ProtoReflect.Descriptor instead.
func (*Port) Descriptor() ([]byte, []int) {
	return file_velez_api_proto_rawDescGZIP(), []int{1}
}

func (x *Port) GetServicePortNumber() uint32 {
	if x != nil {
		return x.ServicePortNumber
	}
	return 0
}

func (x *Port) GetProtocol() Port_Protocol {
	if x != nil {
		return x.Protocol
	}
	return Port_unknown
}

func (x *Port) GetExposedTo() uint32 {
	if x != nil && x.ExposedTo != nil {
		return *x.ExposedTo
	}
	return 0
}

type Volume struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VolumeName    string                 `protobuf:"bytes,1,opt,name=volume_name,json=volumeName,proto3" json:"volume_name,omitempty"`
	ContainerPath string                 `protobuf:"bytes,2,opt,name=container_path,json=containerPath,proto3" json:"container_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Volume) Reset() {
	*x = Volume{}
	mi := &file_velez_api_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Volume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume) ProtoMessage() {}

func (x *Volume) ProtoReflect() protoreflect.Message {
	mi := &file_velez_api_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume.ProtoReflect.Descriptor instead.
func (*Volume) Descriptor() ([]byte, []int) {
	return file_velez_api_proto_rawDescGZIP(), []int{2}
}

func (x *Volume) GetVolumeName() string {
	if x != nil {
		return x.VolumeName
	}
	return ""
}

func (x *Volume) GetContainerPath() string {
	if x != nil {
		return x.ContainerPath
	}
	return ""
}

type NetworkBind struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NetworkName   string                 `protobuf:"bytes,1,opt,name=network_name,json=networkName,proto3" json:"network_name,omitempty"`
	Aliases       []string               `protobuf:"bytes,2,rep,name=aliases,proto3" json:"aliases,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkBind) Reset() {
	*x = NetworkBind{}
	mi := &file_velez_api_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkBind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkBind) ProtoMessage() {}

func (x *NetworkBind) ProtoReflect() protoreflect.Message {
	mi := &file_velez_api_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkBind.ProtoReflect.Descriptor instead.
func (*NetworkBind) Descriptor() ([]byte, []int) {
	return file_velez_api_proto_rawDescGZIP(), []int{3}
}

func (x *NetworkBind) GetNetworkName() string {
	if x != nil {
		return x.NetworkName
	}
	return ""
}

func (x *NetworkBind) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

type Image struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Tags          []string               `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
	Labels        map[string]string      `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Image) Reset() {
	*x = Image{}
	mi := &file_velez_api_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_velez_api_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_velez_api_proto_rawDescGZIP(), []int{4}
}

func (x *Image) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Image) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Image) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type Smerd struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ImageName     string                 `protobuf:"bytes,3,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	Ports         []*Port                `protobuf:"bytes,4,rep,name=ports,proto3" json:"ports,omitempty"`
	Volumes       []*Volume              `protobuf:"bytes,5,rep,name=volumes,proto3" json:"volumes,omitempty"`
	Status        Smerd_Status           `protobuf:"varint,6,opt,name=status,proto3,enum=velez_api.Smerd_Status" json:"status,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Networks      []*NetworkBind         `protobuf:"bytes,8,rep,name=networks,proto3" json:"networks,omitempty"`
	Labels        map[string]string      `protobuf:"bytes,9,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Smerd) Reset() {
	*x = Smerd{}
	mi := &file_velez_api_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Smerd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Smerd) ProtoMessage() {}

func (x *Smerd) ProtoReflect() protoreflect.Message {
	mi := &file_velez_api_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Smerd.ProtoReflect.Descriptor instead.
func (*Smerd) Descriptor() ([]byte, []int) {
	return file_velez_api_proto_rawDescGZIP(), []int{5}
}

func (x *Smerd) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Smerd) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Smerd) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *Smerd) GetPorts() []*Port {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *Smerd) GetVolumes() []*Volume {
	if x != nil {
		return x.Volumes
	}
	return nil
}

func (x *Smerd) GetStatus() Smerd_Status {
	if x != nil {
		return x.Status
	}
	return Smerd_unknown
}

func (x *Smerd) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Smerd) GetNetworks() []*NetworkBind {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *Smerd) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type Container struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Container) Reset() {
	*x = Container{}
	mi := &file_velez_api_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Container) ProtoMessage() {}

func (x *Container) ProtoReflect() protoreflect.Message {
	mi := &file_velez_api_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Container.ProtoReflect.Descriptor instead.
func (*Container) Descriptor() ([]byte, []int) {
	return file_velez_api_proto_rawDescGZIP(), []int{6}
}

type CreateSmerd struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSmerd) Reset() {
	*x = CreateSmerd{}
	mi := &file_velez_api_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSmerd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSmerd) ProtoMessage() {}

func (x *CreateSmerd) ProtoReflect() protoreflect.Message {
	mi := &file_velez_api_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSmerd.ProtoReflect.Descriptor instead.
func (*CreateSmerd) Descriptor() ([]byte, []int) {
	return file_velez_api_proto_rawDescGZIP(), []int{7}
}

type ListSmerds struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSmerds) Reset() {
	*x = ListSmerds{}
	mi := &file_velez_api_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSmerds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSmerds) ProtoMessage() {}

func (x *ListSmerds) ProtoReflect() protoreflect.Message {
	mi := &file_velez_api_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSmerds.ProtoReflect.Descriptor instead.
func (*ListSmerds) Descriptor() ([]byte, []int) {
	return file_velez_api_proto_rawDescGZIP(), []int{8}
}

type DropSmerd struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DropSmerd) Reset() {
	*x = DropSmerd{}
	mi := &file_velez_api_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DropSmerd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropSmerd) ProtoMessage() {}

func (x *DropSmerd) ProtoReflect() protoreflect.Message {
	mi := &file_velez_api_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropSmerd.ProtoReflect.Descriptor instead.
func (*DropSmerd) Descriptor() ([]byte, []int) {
	return file_velez_api_proto_rawDescGZIP(), []int{9}
}

type GetHardware struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHardware) Reset() {
	*x = GetHardware{}
	mi := &file_velez_api_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHardware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHardware) ProtoMessage() {}

func (x *GetHardware) ProtoReflect() protoreflect.Message {
	mi := &file_velez_api_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHardware.ProtoReflect.Descriptor instead.
func (*GetHardware) Descriptor() ([]byte, []int) {
	return file_velez_api_proto_rawDescGZIP(), []int{10}
}

type AssembleConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssembleConfig) Reset() {
	*x = AssembleConfig{}
	mi := &file_velez_api_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssembleConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssembleConfig) ProtoMessage() {}

func (x *AssembleConfig) ProtoReflect() protoreflect.Message {
	mi := &file_velez_api_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssembleConfig.ProtoReflect.Descriptor instead.
func (*AssembleConfig) Descriptor() ([]byte, []int) {
	return file_velez_api_proto_rawDescGZIP(), []int{11}
}

type Version_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Version_Request) Reset() {
	*x = Version_Request{}
	mi := &file_velez_api_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Version_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Version_Request) ProtoMessage() {}

func (x *Version_Request) ProtoReflect() protoreflect.Message {
	mi := &file_velez_api_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Version_Request.ProtoReflect.Descriptor instead.
func (*Version_Request) Descriptor() ([]byte, []int) {
	return file_velez_api_proto_rawDescGZIP(), []int{0, 0}
}

type Version_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       string                 `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Version_Response) Reset() {
	*x = Version_Response{}
	mi := &file_velez_api_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Version_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Version_Response) ProtoMessage() {}

func (x *Version_Response) ProtoReflect() protoreflect.Message {
	mi := &file_velez_api_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Version_Response.ProtoReflect.Descriptor instead.
func (*Version_Response) Descriptor() ([]byte, []int) {
	return file_velez_api_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Version_Response) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Container_Hardware struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CpuAmount     *float32               `protobuf:"fixed32,1,opt,name=cpu_amount,json=cpuAmount,proto3,oneof" json:"cpu_amount,omitempty"`
	RamMb         *uint32                `protobuf:"varint,2,opt,name=ram_mb,json=ramMb,proto3,oneof" json:"ram_mb,omitempty"`
	MemorySwapMb  *uint32                `protobuf:"varint,3,opt,name=memory_swap_mb,json=memorySwapMb,proto3,oneof" json:"memory_swap_mb,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Container_Hardware) Reset() {
	*x = Container_Hardware{}
	mi := &file_velez_api_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Container_Hardware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Container_Hardware) ProtoMessage() {}

func (x *Container_Hardware) ProtoReflect() protoreflect.Message {
	mi := &file_velez_api_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Container_Hardware.ProtoReflect.Descriptor instead.
func (*Container_Hardware) Descriptor() ([]byte, []int) {
	return file_velez_api_proto_rawDescGZIP(), []int{6, 0}
}

func (x *Container_Hardware) GetCpuAmount() float32 {
	if x != nil && x.CpuAmount != nil {
		return *x.CpuAmount
	}
	return 0
}

func (x *Container_Hardware) GetRamMb() uint32 {
	if x != nil && x.RamMb != nil {
		return *x.RamMb
	}
	return 0
}

func (x *Container_Hardware) GetMemorySwapMb() uint32 {
	if x != nil && x.MemorySwapMb != nil {
		return *x.MemorySwapMb
	}
	return 0
}

type Container_Settings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ports         []*Port                `protobuf:"bytes,1,rep,name=ports,proto3" json:"ports,omitempty"`
	Volumes       []*Volume              `protobuf:"bytes,4,rep,name=volumes,proto3" json:"volumes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Container_Settings) Reset() {
	*x = Container_Settings{}
	mi := &file_velez_api_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Container_Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Container_Settings) ProtoMessage() {}

func (x *Container_Settings) ProtoReflect() protoreflect.Message {
	mi := &file_velez_api_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Container_Settings.ProtoReflect.Descriptor instead.
func (*Container_Settings) Descriptor() ([]byte, []int) {
	return file_velez_api_proto_rawDescGZIP(), []int{6, 1}
}

func (x *Container_Settings) GetPorts() []*Port {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *Container_Settings) GetVolumes() []*Volume {
	if x != nil {
		return x.Volumes
	}
	return nil
}

type Container_Healthcheck struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// if command is not presented,
	// velez will simply
	// wait "retires" times for "interval_second" seconds each time,
	// until container get status Running
	Command        *string `protobuf:"bytes,1,opt,name=command,proto3,oneof" json:"command,omitempty"`
	IntervalSecond uint32  `protobuf:"varint,2,opt,name=interval_second,json=intervalSecond,proto3" json:"interval_second,omitempty"`
	TimeoutSecond  *uint32 `protobuf:"varint,3,opt,name=timeout_second,json=timeoutSecond,proto3,oneof" json:"timeout_second,omitempty"`
	Retries        uint32  `protobuf:"varint,4,opt,name=retries,proto3" json:"retries,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Container_Healthcheck) Reset() {
	*x = Container_Healthcheck{}
	mi := &file_velez_api_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Container_Healthcheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Container_Healthcheck) ProtoMessage() {}

func (x *Container_Healthcheck) ProtoReflect() protoreflect.Message {
	mi := &file_velez_api_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Container_Healthcheck.ProtoReflect.Descriptor instead.
func (*Container_Healthcheck) Descriptor() ([]byte, []int) {
	return file_velez_api_proto_rawDescGZIP(), []int{6, 2}
}

func (x *Container_Healthcheck) GetCommand() string {
	if x != nil && x.Command != nil {
		return *x.Command
	}
	return ""
}

func (x *Container_Healthcheck) GetIntervalSecond() uint32 {
	if x != nil {
		return x.IntervalSecond
	}
	return 0
}

func (x *Container_Healthcheck) GetTimeoutSecond() uint32 {
	if x != nil && x.TimeoutSecond != nil {
		return *x.TimeoutSecond
	}
	return 0
}

func (x *Container_Healthcheck) GetRetries() uint32 {
	if x != nil {
		return x.Retries
	}
	return 0
}

type CreateSmerd_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ImageName     string                 `protobuf:"bytes,2,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	Hardware      *Container_Hardware    `protobuf:"bytes,3,opt,name=hardware,proto3,oneof" json:"hardware,omitempty"`
	Settings      *Container_Settings    `protobuf:"bytes,4,opt,name=settings,proto3,oneof" json:"settings,omitempty"`
	Command       *string                `protobuf:"bytes,5,opt,name=command,proto3,oneof" json:"command,omitempty"`
	Env           map[string]string      `protobuf:"bytes,6,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Healthcheck   *Container_Healthcheck `protobuf:"bytes,7,opt,name=healthcheck,proto3,oneof" json:"healthcheck,omitempty"`
	Labels        map[string]string      `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	IgnoreConfig  bool                   `protobuf:"varint,9,opt,name=ignore_config,json=ignoreConfig,proto3" json:"ignore_config,omitempty"`
	UseImagePorts bool                   `protobuf:"varint,10,opt,name=use_image_ports,json=useImagePorts,proto3" json:"use_image_ports,omitempty"`
	ConfigVersion *string                `protobuf:"bytes,11,opt,name=config_version,json=configVersion,proto3,oneof" json:"config_version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSmerd_Request) Reset() {
	*x = CreateSmerd_Request{}
	mi := &file_velez_api_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSmerd_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSmerd_Request) ProtoMessage() {}

func (x *CreateSmerd_Request) ProtoReflect() protoreflect.Message {
	mi := &file_velez_api_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSmerd_Request.ProtoReflect.Descriptor instead.
func (*CreateSmerd_Request) Descriptor() ([]byte, []int) {
	return file_velez_api_proto_rawDescGZIP(), []int{7, 0}
}

func (x *CreateSmerd_Request) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateSmerd_Request) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *CreateSmerd_Request) GetHardware() *Container_Hardware {
	if x != nil {
		return x.Hardware
	}
	return nil
}

func (x *CreateSmerd_Request) GetSettings() *Container_Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *CreateSmerd_Request) GetCommand() string {
	if x != nil && x.Command != nil {
		return *x.Command
	}
	return ""
}

func (x *CreateSmerd_Request) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *CreateSmerd_Request) GetHealthcheck() *Container_Healthcheck {
	if x != nil {
		return x.Healthcheck
	}
	return nil
}

func (x *CreateSmerd_Request) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateSmerd_Request) GetIgnoreConfig() bool {
	if x != nil {
		return x.IgnoreConfig
	}
	return false
}

func (x *CreateSmerd_Request) GetUseImagePorts() bool {
	if x != nil {
		return x.UseImagePorts
	}
	return false
}

func (x *CreateSmerd_Request) GetConfigVersion() string {
	if x != nil && x.ConfigVersion != nil {
		return *x.ConfigVersion
	}
	return ""
}

type ListSmerds_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Limit         *uint32                `protobuf:"varint,1,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	Name          *string                `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Id            *string                `protobuf:"bytes,3,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Label         map[string]string      `protobuf:"bytes,4,rep,name=label,proto3" json:"label,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSmerds_Request) Reset() {
	*x = ListSmerds_Request{}
	mi := &file_velez_api_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSmerds_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSmerds_Request) ProtoMessage() {}

func (x *ListSmerds_Request) ProtoReflect() protoreflect.Message {
	mi := &file_velez_api_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSmerds_Request.ProtoReflect.Descriptor instead.
func (*ListSmerds_Request) Descriptor() ([]byte, []int) {
	return file_velez_api_proto_rawDescGZIP(), []int{8, 0}
}

func (x *ListSmerds_Request) GetLimit() uint32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ListSmerds_Request) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ListSmerds_Request) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ListSmerds_Request) GetLabel() map[string]string {
	if x != nil {
		return x.Label
	}
	return nil
}

type ListSmerds_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Smerds        []*Smerd               `protobuf:"bytes,1,rep,name=smerds,proto3" json:"smerds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSmerds_Response) Reset() {
	*x = ListSmerds_Response{}
	mi := &file_velez_api_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSmerds_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSmerds_Response) ProtoMessage() {}

func (x *ListSmerds_Response) ProtoReflect() protoreflect.Message {
	mi := &file_velez_api_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSmerds_Response.ProtoReflect.Descriptor instead.
func (*ListSmerds_Response) Descriptor() ([]byte, []int) {
	return file_velez_api_proto_rawDescGZIP(), []int{8, 1}
}

func (x *ListSmerds_Response) GetSmerds() []*Smerd {
	if x != nil {
		return x.Smerds
	}
	return nil
}

type DropSmerd_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuids         []string               `protobuf:"bytes,1,rep,name=uuids,proto3" json:"uuids,omitempty"`
	Name          []string               `protobuf:"bytes,2,rep,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DropSmerd_Request) Reset() {
	*x = DropSmerd_Request{}
	mi := &file_velez_api_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DropSmerd_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropSmerd_Request) ProtoMessage() {}

func (x *DropSmerd_Request) ProtoReflect() protoreflect.Message {
	mi := &file_velez_api_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropSmerd_Request.ProtoReflect.Descriptor instead.
func (*DropSmerd_Request) Descriptor() ([]byte, []int) {
	return file_velez_api_proto_rawDescGZIP(), []int{9, 0}
}

func (x *DropSmerd_Request) GetUuids() []string {
	if x != nil {
		return x.Uuids
	}
	return nil
}

func (x *DropSmerd_Request) GetName() []string {
	if x != nil {
		return x.Name
	}
	return nil
}

type DropSmerd_Response struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Failed        []*DropSmerd_Response_Error `protobuf:"bytes,1,rep,name=failed,proto3" json:"failed,omitempty"`
	Successful    []string                    `protobuf:"bytes,2,rep,name=successful,proto3" json:"successful,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DropSmerd_Response) Reset() {
	*x = DropSmerd_Response{}
	mi := &file_velez_api_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DropSmerd_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropSmerd_Response) ProtoMessage() {}

func (x *DropSmerd_Response) ProtoReflect() protoreflect.Message {
	mi := &file_velez_api_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropSmerd_Response.ProtoReflect.Descriptor instead.
func (*DropSmerd_Response) Descriptor() ([]byte, []int) {
	return file_velez_api_proto_rawDescGZIP(), []int{9, 1}
}

func (x *DropSmerd_Response) GetFailed() []*DropSmerd_Response_Error {
	if x != nil {
		return x.Failed
	}
	return nil
}

func (x *DropSmerd_Response) GetSuccessful() []string {
	if x != nil {
		return x.Successful
	}
	return nil
}

type DropSmerd_Response_Error struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Cause         string                 `protobuf:"bytes,2,opt,name=cause,proto3" json:"cause,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DropSmerd_Response_Error) Reset() {
	*x = DropSmerd_Response_Error{}
	mi := &file_velez_api_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DropSmerd_Response_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropSmerd_Response_Error) ProtoMessage() {}

func (x *DropSmerd_Response_Error) ProtoReflect() protoreflect.Message {
	mi := &file_velez_api_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropSmerd_Response_Error.ProtoReflect.Descriptor instead.
func (*DropSmerd_Response_Error) Descriptor() ([]byte, []int) {
	return file_velez_api_proto_rawDescGZIP(), []int{9, 1, 0}
}

func (x *DropSmerd_Response_Error) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *DropSmerd_Response_Error) GetCause() string {
	if x != nil {
		return x.Cause
	}
	return ""
}

type GetHardware_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHardware_Request) Reset() {
	*x = GetHardware_Request{}
	mi := &file_velez_api_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHardware_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHardware_Request) ProtoMessage() {}

func (x *GetHardware_Request) ProtoReflect() protoreflect.Message {
	mi := &file_velez_api_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHardware_Request.ProtoReflect.Descriptor instead.
func (*GetHardware_Request) Descriptor() ([]byte, []int) {
	return file_velez_api_proto_rawDescGZIP(), []int{10, 0}
}

type GetHardware_Response struct {
	state          protoimpl.MessageState      `protogen:"open.v1"`
	Cpu            *GetHardware_Response_Value `protobuf:"bytes,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	DiskMem        *GetHardware_Response_Value `protobuf:"bytes,2,opt,name=disk_mem,json=diskMem,proto3" json:"disk_mem,omitempty"`
	Ram            *GetHardware_Response_Value `protobuf:"bytes,3,opt,name=ram,proto3" json:"ram,omitempty"`
	PortsAvailable []uint32                    `protobuf:"varint,4,rep,packed,name=ports_available,json=portsAvailable,proto3" json:"ports_available,omitempty"`
	PortsOccupied  []uint32                    `protobuf:"varint,5,rep,packed,name=ports_occupied,json=portsOccupied,proto3" json:"ports_occupied,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetHardware_Response) Reset() {
	*x = GetHardware_Response{}
	mi := &file_velez_api_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHardware_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHardware_Response) ProtoMessage() {}

func (x *GetHardware_Response) ProtoReflect() protoreflect.Message {
	mi := &file_velez_api_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHardware_Response.ProtoReflect.Descriptor instead.
func (*GetHardware_Response) Descriptor() ([]byte, []int) {
	return file_velez_api_proto_rawDescGZIP(), []int{10, 1}
}

func (x *GetHardware_Response) GetCpu() *GetHardware_Response_Value {
	if x != nil {
		return x.Cpu
	}
	return nil
}

func (x *GetHardware_Response) GetDiskMem() *GetHardware_Response_Value {
	if x != nil {
		return x.DiskMem
	}
	return nil
}

func (x *GetHardware_Response) GetRam() *GetHardware_Response_Value {
	if x != nil {
		return x.Ram
	}
	return nil
}

func (x *GetHardware_Response) GetPortsAvailable() []uint32 {
	if x != nil {
		return x.PortsAvailable
	}
	return nil
}

func (x *GetHardware_Response) GetPortsOccupied() []uint32 {
	if x != nil {
		return x.PortsOccupied
	}
	return nil
}

type GetHardware_Response_Value struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Err           string                 `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHardware_Response_Value) Reset() {
	*x = GetHardware_Response_Value{}
	mi := &file_velez_api_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHardware_Response_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHardware_Response_Value) ProtoMessage() {}

func (x *GetHardware_Response_Value) ProtoReflect() protoreflect.Message {
	mi := &file_velez_api_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHardware_Response_Value.ProtoReflect.Descriptor instead.
func (*GetHardware_Response_Value) Descriptor() ([]byte, []int) {
	return file_velez_api_proto_rawDescGZIP(), []int{10, 1, 0}
}

func (x *GetHardware_Response_Value) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *GetHardware_Response_Value) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type AssembleConfig_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ImageName     string                 `protobuf:"bytes,1,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	ServiceName   string                 `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssembleConfig_Request) Reset() {
	*x = AssembleConfig_Request{}
	mi := &file_velez_api_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssembleConfig_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssembleConfig_Request) ProtoMessage() {}

func (x *AssembleConfig_Request) ProtoReflect() protoreflect.Message {
	mi := &file_velez_api_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssembleConfig_Request.ProtoReflect.Descriptor instead.
func (*AssembleConfig_Request) Descriptor() ([]byte, []int) {
	return file_velez_api_proto_rawDescGZIP(), []int{11, 0}
}

func (x *AssembleConfig_Request) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *AssembleConfig_Request) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

type AssembleConfig_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        []byte                 `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssembleConfig_Response) Reset() {
	*x = AssembleConfig_Response{}
	mi := &file_velez_api_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssembleConfig_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssembleConfig_Response) ProtoMessage() {}

func (x *AssembleConfig_Response) ProtoReflect() protoreflect.Message {
	mi := &file_velez_api_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssembleConfig_Response.ProtoReflect.Descriptor instead.
func (*AssembleConfig_Response) Descriptor() ([]byte, []int) {
	return file_velez_api_proto_rawDescGZIP(), []int{11, 1}
}

func (x *AssembleConfig_Response) GetConfig() []byte {
	if x != nil {
		return x.Config
	}
	return nil
}

var File_velez_api_proto protoreflect.FileDescriptor

var file_velez_api_proto_rawDesc = string([]byte{
	0x0a, 0x0f, 0x76, 0x65, 0x6c, 0x65, 0x7a, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x76, 0x65, 0x6c, 0x65, 0x7a, 0x5f, 0x61, 0x70, 0x69, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x09, 0x6e, 0x70, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3a, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x1a, 0x09, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x0a, 0x08,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xca, 0x01, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x76, 0x65, 0x6c, 0x65, 0x7a, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x12, 0x22, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x09, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64,
	0x54, 0x6f, 0x88, 0x01, 0x01, 0x22, 0x29, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x12, 0x0b, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x74, 0x63, 0x70, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x75, 0x64, 0x70, 0x10, 0x02,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x22,
	0x50, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x50, 0x61, 0x74,
	0x68, 0x22, 0x4a, 0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x69, 0x6e, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x22, 0xa0, 0x01,
	0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12,
	0x34, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x76, 0x65, 0x6c, 0x65, 0x7a, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xa4, 0x04, 0x0a, 0x05, 0x53, 0x6d, 0x65, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x25, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x76, 0x65, 0x6c, 0x65, 0x7a, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x65, 0x6c, 0x65,
	0x7a, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x07, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x76, 0x65, 0x6c, 0x65, 0x7a, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x6d, 0x65, 0x72, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x32, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x65, 0x6c, 0x65, 0x7a, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x08, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x65, 0x6c, 0x65, 0x7a, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x6d, 0x65, 0x72, 0x64, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6f, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x0b, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x72, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x69, 0x6e, 0x67, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x10,
	0x05, 0x12, 0x0a, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x74, 0x65, 0x64, 0x10, 0x06, 0x12, 0x08, 0x0a,
	0x04, 0x64, 0x65, 0x61, 0x64, 0x10, 0x07, 0x22, 0xcd, 0x03, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x1a, 0xa2, 0x01, 0x0a, 0x08, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x70, 0x75, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x09, 0x63, 0x70, 0x75, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x72, 0x61, 0x6d, 0x5f, 0x6d, 0x62,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x05, 0x72, 0x61, 0x6d, 0x4d, 0x62, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x77, 0x61,
	0x70, 0x5f, 0x6d, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x0c, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x53, 0x77, 0x61, 0x70, 0x4d, 0x62, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x72, 0x61, 0x6d, 0x5f, 0x6d, 0x62, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x6d, 0x62, 0x1a, 0x5e, 0x0a, 0x08, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x25, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x65, 0x6c, 0x65, 0x7a, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2b, 0x0a,
	0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x76, 0x65, 0x6c, 0x65, 0x7a, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x1a, 0xba, 0x01, 0x0a, 0x0b, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0d, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0xe8, 0x05, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x6d, 0x65, 0x72, 0x64, 0x1a, 0xd8, 0x05, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x65, 0x6c, 0x65, 0x7a,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x48,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x48, 0x00, 0x52, 0x08, 0x68, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x65, 0x6c, 0x65, 0x7a,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x01, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x76, 0x65, 0x6c, 0x65, 0x7a, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x65, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x6e, 0x76,
	0x12, 0x47, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x65, 0x6c, 0x65, 0x7a, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x03, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x76, 0x65, 0x6c, 0x65,
	0x7a, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x65, 0x72,
	0x64, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x73, 0x65,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39,
	0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xab, 0x02, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d, 0x65, 0x72, 0x64,
	0x73, 0x1a, 0xe6, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x76, 0x65, 0x6c, 0x65, 0x7a, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d, 0x65, 0x72, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x1a, 0x38, 0x0a, 0x0a, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x1a, 0x34, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x6d, 0x65, 0x72, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x6c, 0x65, 0x7a, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x6d, 0x65, 0x72, 0x64, 0x52, 0x06, 0x73, 0x6d, 0x65, 0x72, 0x64, 0x73,
	0x22, 0xdd, 0x01, 0x0a, 0x09, 0x44, 0x72, 0x6f, 0x70, 0x53, 0x6d, 0x65, 0x72, 0x64, 0x1a, 0x33,
	0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x1a, 0x9a, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3b, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x76, 0x65, 0x6c, 0x65, 0x7a, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x72, 0x6f,
	0x70, 0x53, 0x6d, 0x65, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x1a, 0x31, 0x0a,
	0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61,
	0x75, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65,
	0x22, 0xda, 0x02, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x1a, 0x09, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0xbf, 0x02, 0x0a, 0x08,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x76, 0x65, 0x6c, 0x65, 0x7a, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x63, 0x70,
	0x75, 0x12, 0x40, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x76, 0x65, 0x6c, 0x65, 0x7a, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x64, 0x69, 0x73, 0x6b,
	0x4d, 0x65, 0x6d, 0x12, 0x37, 0x0a, 0x03, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x76, 0x65, 0x6c, 0x65, 0x7a, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x72, 0x61, 0x6d, 0x12, 0x27, 0x0a, 0x0f,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x6f,
	0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x1a, 0x2f, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0x81, 0x01,
	0x0a, 0x0e, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x1a, 0x4b, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x22, 0x0a,
	0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x32, 0xf3, 0x04, 0x0a, 0x08, 0x56, 0x65, 0x6c, 0x65, 0x7a, 0x41, 0x50, 0x49, 0x12, 0x58,
	0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x76, 0x65, 0x6c, 0x65,
	0x7a, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x76, 0x65, 0x6c, 0x65, 0x7a, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x6d, 0x65, 0x72, 0x64, 0x12, 0x1e, 0x2e, 0x76, 0x65, 0x6c, 0x65, 0x7a, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x65, 0x72, 0x64, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x76, 0x65, 0x6c, 0x65, 0x7a, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x6d, 0x65, 0x72, 0x64, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x16, 0x3a, 0x01, 0x2a, 0x22, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x6d, 0x65, 0x72, 0x64,
	0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x67, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x6d, 0x65, 0x72, 0x64, 0x73, 0x12, 0x1d, 0x2e, 0x76, 0x65, 0x6c, 0x65, 0x7a, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d, 0x65, 0x72, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x76, 0x65, 0x6c, 0x65, 0x7a, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6d, 0x65, 0x72, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x3a, 0x01, 0x2a, 0x22,
	0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x6d, 0x65, 0x72, 0x64, 0x2f, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x64, 0x0a, 0x09, 0x44, 0x72, 0x6f, 0x70, 0x53, 0x6d, 0x65, 0x72, 0x64, 0x12, 0x1c, 0x2e,
	0x76, 0x65, 0x6c, 0x65, 0x7a, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x53, 0x6d,
	0x65, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x76, 0x65,
	0x6c, 0x65, 0x7a, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x53, 0x6d, 0x65, 0x72,
	0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x14, 0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x6d, 0x65, 0x72,
	0x64, 0x2f, 0x64, 0x72, 0x6f, 0x70, 0x12, 0x65, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x12, 0x1e, 0x2e, 0x76, 0x65, 0x6c, 0x65, 0x7a, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x76, 0x65, 0x6c, 0x65, 0x7a, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x12, 0x78, 0x0a,
	0x0e, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x21, 0x2e, 0x76, 0x65, 0x6c, 0x65, 0x7a, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x6d, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x76, 0x65, 0x6c, 0x65, 0x7a, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41,
	0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01,
	0x2a, 0x22, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61,
	0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x42, 0x1e, 0x92, 0x82, 0x19, 0x0e, 0x40, 0x67, 0x6f,
	0x64, 0x76, 0x65, 0x72, 0x76, 0x2f, 0x76, 0x65, 0x6c, 0x65, 0x7a, 0x5a, 0x0a, 0x2f, 0x76, 0x65,
	0x6c, 0x65, 0x7a, 0x5f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_velez_api_proto_rawDescOnce sync.Once
	file_velez_api_proto_rawDescData []byte
)

func file_velez_api_proto_rawDescGZIP() []byte {
	file_velez_api_proto_rawDescOnce.Do(func() {
		file_velez_api_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_velez_api_proto_rawDesc), len(file_velez_api_proto_rawDesc)))
	})
	return file_velez_api_proto_rawDescData
}

var file_velez_api_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_velez_api_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_velez_api_proto_goTypes = []any{
	(Port_Protocol)(0),                 // 0: velez_api.Port.Protocol
	(Smerd_Status)(0),                  // 1: velez_api.Smerd.Status
	(*Version)(nil),                    // 2: velez_api.Version
	(*Port)(nil),                       // 3: velez_api.Port
	(*Volume)(nil),                     // 4: velez_api.Volume
	(*NetworkBind)(nil),                // 5: velez_api.NetworkBind
	(*Image)(nil),                      // 6: velez_api.Image
	(*Smerd)(nil),                      // 7: velez_api.Smerd
	(*Container)(nil),                  // 8: velez_api.Container
	(*CreateSmerd)(nil),                // 9: velez_api.CreateSmerd
	(*ListSmerds)(nil),                 // 10: velez_api.ListSmerds
	(*DropSmerd)(nil),                  // 11: velez_api.DropSmerd
	(*GetHardware)(nil),                // 12: velez_api.GetHardware
	(*AssembleConfig)(nil),             // 13: velez_api.AssembleConfig
	(*Version_Request)(nil),            // 14: velez_api.Version.Request
	(*Version_Response)(nil),           // 15: velez_api.Version.Response
	nil,                                // 16: velez_api.Image.LabelsEntry
	nil,                                // 17: velez_api.Smerd.LabelsEntry
	(*Container_Hardware)(nil),         // 18: velez_api.Container.Hardware
	(*Container_Settings)(nil),         // 19: velez_api.Container.Settings
	(*Container_Healthcheck)(nil),      // 20: velez_api.Container.Healthcheck
	(*CreateSmerd_Request)(nil),        // 21: velez_api.CreateSmerd.Request
	nil,                                // 22: velez_api.CreateSmerd.Request.EnvEntry
	nil,                                // 23: velez_api.CreateSmerd.Request.LabelsEntry
	(*ListSmerds_Request)(nil),         // 24: velez_api.ListSmerds.Request
	(*ListSmerds_Response)(nil),        // 25: velez_api.ListSmerds.Response
	nil,                                // 26: velez_api.ListSmerds.Request.LabelEntry
	(*DropSmerd_Request)(nil),          // 27: velez_api.DropSmerd.Request
	(*DropSmerd_Response)(nil),         // 28: velez_api.DropSmerd.Response
	(*DropSmerd_Response_Error)(nil),   // 29: velez_api.DropSmerd.Response.Error
	(*GetHardware_Request)(nil),        // 30: velez_api.GetHardware.Request
	(*GetHardware_Response)(nil),       // 31: velez_api.GetHardware.Response
	(*GetHardware_Response_Value)(nil), // 32: velez_api.GetHardware.Response.Value
	(*AssembleConfig_Request)(nil),     // 33: velez_api.AssembleConfig.Request
	(*AssembleConfig_Response)(nil),    // 34: velez_api.AssembleConfig.Response
	(*timestamppb.Timestamp)(nil),      // 35: google.protobuf.Timestamp
}
var file_velez_api_proto_depIdxs = []int32{
	0,  // 0: velez_api.Port.protocol:type_name -> velez_api.Port.Protocol
	16, // 1: velez_api.Image.labels:type_name -> velez_api.Image.LabelsEntry
	3,  // 2: velez_api.Smerd.ports:type_name -> velez_api.Port
	4,  // 3: velez_api.Smerd.volumes:type_name -> velez_api.Volume
	1,  // 4: velez_api.Smerd.status:type_name -> velez_api.Smerd.Status
	35, // 5: velez_api.Smerd.created_at:type_name -> google.protobuf.Timestamp
	5,  // 6: velez_api.Smerd.networks:type_name -> velez_api.NetworkBind
	17, // 7: velez_api.Smerd.labels:type_name -> velez_api.Smerd.LabelsEntry
	3,  // 8: velez_api.Container.Settings.ports:type_name -> velez_api.Port
	4,  // 9: velez_api.Container.Settings.volumes:type_name -> velez_api.Volume
	18, // 10: velez_api.CreateSmerd.Request.hardware:type_name -> velez_api.Container.Hardware
	19, // 11: velez_api.CreateSmerd.Request.settings:type_name -> velez_api.Container.Settings
	22, // 12: velez_api.CreateSmerd.Request.env:type_name -> velez_api.CreateSmerd.Request.EnvEntry
	20, // 13: velez_api.CreateSmerd.Request.healthcheck:type_name -> velez_api.Container.Healthcheck
	23, // 14: velez_api.CreateSmerd.Request.labels:type_name -> velez_api.CreateSmerd.Request.LabelsEntry
	26, // 15: velez_api.ListSmerds.Request.label:type_name -> velez_api.ListSmerds.Request.LabelEntry
	7,  // 16: velez_api.ListSmerds.Response.smerds:type_name -> velez_api.Smerd
	29, // 17: velez_api.DropSmerd.Response.failed:type_name -> velez_api.DropSmerd.Response.Error
	32, // 18: velez_api.GetHardware.Response.cpu:type_name -> velez_api.GetHardware.Response.Value
	32, // 19: velez_api.GetHardware.Response.disk_mem:type_name -> velez_api.GetHardware.Response.Value
	32, // 20: velez_api.GetHardware.Response.ram:type_name -> velez_api.GetHardware.Response.Value
	14, // 21: velez_api.VelezAPI.Version:input_type -> velez_api.Version.Request
	21, // 22: velez_api.VelezAPI.CreateSmerd:input_type -> velez_api.CreateSmerd.Request
	24, // 23: velez_api.VelezAPI.ListSmerds:input_type -> velez_api.ListSmerds.Request
	27, // 24: velez_api.VelezAPI.DropSmerd:input_type -> velez_api.DropSmerd.Request
	30, // 25: velez_api.VelezAPI.GetHardware:input_type -> velez_api.GetHardware.Request
	33, // 26: velez_api.VelezAPI.AssembleConfig:input_type -> velez_api.AssembleConfig.Request
	15, // 27: velez_api.VelezAPI.Version:output_type -> velez_api.Version.Response
	7,  // 28: velez_api.VelezAPI.CreateSmerd:output_type -> velez_api.Smerd
	25, // 29: velez_api.VelezAPI.ListSmerds:output_type -> velez_api.ListSmerds.Response
	28, // 30: velez_api.VelezAPI.DropSmerd:output_type -> velez_api.DropSmerd.Response
	31, // 31: velez_api.VelezAPI.GetHardware:output_type -> velez_api.GetHardware.Response
	34, // 32: velez_api.VelezAPI.AssembleConfig:output_type -> velez_api.AssembleConfig.Response
	27, // [27:33] is the sub-list for method output_type
	21, // [21:27] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_velez_api_proto_init() }
func file_velez_api_proto_init() {
	if File_velez_api_proto != nil {
		return
	}
	file_velez_api_proto_msgTypes[1].OneofWrappers = []any{}
	file_velez_api_proto_msgTypes[16].OneofWrappers = []any{}
	file_velez_api_proto_msgTypes[18].OneofWrappers = []any{}
	file_velez_api_proto_msgTypes[19].OneofWrappers = []any{}
	file_velez_api_proto_msgTypes[22].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_velez_api_proto_rawDesc), len(file_velez_api_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_velez_api_proto_goTypes,
		DependencyIndexes: file_velez_api_proto_depIdxs,
		EnumInfos:         file_velez_api_proto_enumTypes,
		MessageInfos:      file_velez_api_proto_msgTypes,
	}.Build()
	File_velez_api_proto = out.File
	file_velez_api_proto_goTypes = nil
	file_velez_api_proto_depIdxs = nil
}
